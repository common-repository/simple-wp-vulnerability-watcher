<?php

if (!defined('ABSPATH')) {
    exit; // Prevent direct access if accessed outside of WordPress
}

// WordPress hooks to add the menu, display admin notices, add admin bar menu, and handle AJAX request for dismissing notices
add_action('admin_menu', 'wpcv_menu');
add_action('admin_notices', 'wpcv_display_admin_notice');
add_action('admin_bar_menu', 'wpcv_admin_bar_menu', 999);
add_action('wp_ajax_wpcv_dismiss_notice', 'wpcv_dismiss_notice');

// Hooks for vulnerability check trigger based on specific actions
add_action('admin_menu', 'wpcv_vulnerability_check_trigger');
add_action('upgrader_process_complete', 'wpcv_check_vulnerabilities_on_upgrade', 10, 2);
add_action('activated_plugin', 'wpcv_check_vulnerabilities_on_activation', 10, 2);
add_action('switch_theme', 'wpcv_check_vulnerabilities_on_theme_switch');
add_action('delete_theme', 'wpcv_check_vulnerabilities_on_theme_delete', 10, 1);

/**
 * Triggers the vulnerability check when theme is deleted
 */
function wpcv_check_vulnerabilities_on_theme_delete()
{
    wpcv_check_all_vulnerabilities();
}

/**
 * Triggers the vulnerability check when visiting the plugin's admin page
 */
function wpcv_vulnerability_check_trigger()
{
    // Check if we are in the WordPress admin and on the "check-vulnerabilities" page
    if (is_admin()) {
        $current_screen = get_current_screen();

        // Check if we're on the "check-vulnerabilities" page
        if (isset($current_screen->id) && $current_screen->id === 'toplevel_page_check-vulnerabilities') {
            wpcv_check_all_vulnerabilities();
        }

        // Check if we're on the themes.php page
        if (isset($current_screen->base) && $current_screen->base === 'themes') {
            wpcv_check_all_vulnerabilities();
        }
    }
}


/**
 * Triggers the vulnerability check when a plugin or theme is upgraded
 * 
 * @param WP_Upgrader $upgrader The upgrader object.
 * @param array $hook_extra Array of bulk item update data.
 */
function wpcv_check_vulnerabilities_on_upgrade($upgrader_object, $hook_extra)
{
    // Check if the upgrade is related to a plugin or theme
    if (isset($hook_extra['type']) && in_array($hook_extra['type'], ['plugin', 'theme'])) {
        // Check if the action is 'update', 'install', or another upgrade-related action
        if (isset($hook_extra['action']) && in_array($hook_extra['action'], ['update', 'install'])) {
            // Call the function to check all vulnerabilities
            wpcv_check_all_vulnerabilities();
        }
    }
}

/**
 * Triggers the vulnerability check when a plugin is activated
 * 
 * @param string $plugin The plugin path.
 * @param bool $network_wide Whether to activate the plugin network-wide.
 */
function wpcv_check_vulnerabilities_on_activation($plugin, $network_wide)
{
    // Run the vulnerability check when a plugin is activated
    wpcv_check_all_vulnerabilities(); // Call the function to check all vulnerabilities
}

/**
 * Triggers the vulnerability check when a theme is switched
 */
function wpcv_check_vulnerabilities_on_theme_switch()
{
    // Run the vulnerability check when a theme is switched
    wpcv_check_all_vulnerabilities(); // Call the function to check all vulnerabilities
}

/**
 * Adds a menu item for the vulnerability checker in the WordPress admin sidebar
 */
function wpcv_menu()
{
    // Check all vulnerabilities before displaying the menu
    $vulnerabilities_count = get_option('wpcv_total_vulnerabilities_count', 0);


    // Set menu title with or without the vulnerability count bubble
    $menu_title = $vulnerabilities_count > 0 ?

        sprintf(
            /* translators: %s: vulnerabilities count */
            __('Vulnerabilities %s', 'simple-wp-vulnerability-watcher'),
            '<span class="update-plugins"><span class="plugin-count">' . number_format_i18n($vulnerabilities_count) . '</span></span>'
        ) : __('Vulnerabilities', 'simple-wp-vulnerability-watcher');

    // Add the menu page for the plugin under "Vulnerabilities"
    add_menu_page(__('Vulnerabilities', 'simple-wp-vulnerability-watcher'), $menu_title, 'manage_options', 'check-vulnerabilities', 'wpcv_page', 'dashicons-shield-alt', 90);
}

/**
 * Displays the page content when the plugin menu is clicked
 */
function wpcv_page()
{
    // Display the header for the plugin's table
    wpcv_table_header();

    // Display a section for plugin vulnerabilities
    wpcv_section_title_row('<i class="dashicons dashicons-admin-plugins"></i> ' . __('Plugins', 'simple-wp-vulnerability-watcher'));
    $all_plugins = get_plugins();
    foreach ($all_plugins as $path => $plugin) {
        $slug_parts = explode('/', $path);
        $slug = $slug_parts[0];
        if ($slug !== 'wp-check-vulnerability') {
            $vulnerabilities = wpcv_check_vulnerability($slug, $plugin['Version'], 'plugin');
            wpcv_table_row($plugin['Name'], $plugin['Version'], $vulnerabilities, "https://www.wpvulnerability.net/plugin/{$slug}/");
        }
    }

    // Display a section for theme vulnerabilities
    wpcv_section_title_row('<span class="dashicons dashicons-admin-appearance"></span> ' . __('Themes', 'simple-wp-vulnerability-watcher'));
    $all_themes = wp_get_themes();
    foreach ($all_themes as $slug => $theme) {
        $vulnerabilities = wpcv_check_vulnerability($slug, $theme->get('Version'), 'theme');
        wpcv_table_row($theme->get('Name'), $theme->get('Version'), $vulnerabilities, "https://www.wpvulnerability.net/theme/{$slug}/");
    }

    // Display a section for WordPress core vulnerabilities
    wpcv_section_title_row('<span class="dashicons dashicons-wordpress"></span> ' . __('WordPress Core', 'simple-wp-vulnerability-watcher'));
    $wp_version = get_bloginfo('version');
    $vulnerabilities = wpcv_check_vulnerability('wordpress', $wp_version, 'core');
    wpcv_table_row('WordPress', $wp_version, $vulnerabilities, "https://www.wpvulnerability.net/core/{$wp_version}/");

    // Display the footer for the plugin's table
    wpcv_table_footer();
}

/**
 * Renders the table header for displaying plugin/theme/core vulnerabilities
 */
function wpcv_table_header()
{
    $update_data = wp_get_update_data();
    $total_updates = $update_data['counts']['total'];

    // Output the table structure with column headings
    echo '<div class="wrap">';
    echo '<h1 class="wp-heading-inline">' . esc_html__('Checks for vulnerabilities in plugins, themes, and WordPress core', 'simple-wp-vulnerability-watcher') . '</h1>';
    echo '<h4>' . esc_html__('Before each update, make a backup of your files and database.', 'simple-wp-vulnerability-watcher') . '</h4>';
    echo '<div class="button-wrap">';
    echo '<div class="button-group">';
    echo '<a href="update-core.php" class="button button-primary button-hero">' . esc_html__('View updates', 'simple-wp-vulnerability-watcher') . ' <span class="update-plugins-button-count">' . esc_html(number_format_i18n($total_updates)) . '</span></a>';
    echo '<a href="plugins.php" class="button button-secondary button-hero">' . esc_html__('Go to plugins', 'simple-wp-vulnerability-watcher') . '</a>';
    echo '<a href="site-health.php" class="button button-secondary button-hero">' . esc_html__('Site health', 'simple-wp-vulnerability-watcher') . '</a>';
    echo '</div>';
    echo '<a href="https://ko-fi.com/codestorm" class="button button-secondary button-hero" target"_blank">' . esc_html__('Support me on Ko-fi', 'simple-wp-vulnerability-watcher') . ' <span class="ko-fi">  â˜• </span></a>';
    echo '</div>';
    echo '<table class="widefat fixed striped" cellspacing="0">';
    echo '<thead><tr><th>' . esc_html__('Name', 'simple-wp-vulnerability-watcher') . '</th><th>' . esc_html__('Your Version', 'simple-wp-vulnerability-watcher') . '</th><th>' . esc_html__('Status', 'simple-wp-vulnerability-watcher') . '</th></tr></thead>';
    echo '<tbody>';
}

/**
 * Renders the table footer for the vulnerabilities table
 */
function wpcv_table_footer()
{
    // Close the table and the wrapper div
    echo '</tbody></table></div>';
}

/**
 * Renders a row in the vulnerabilities table for each plugin/theme/core component
 */
function wpcv_table_row($name, $version, $vulnerabilities, $url)
{
    echo '<tr>';
    echo '<td>' . esc_html($name) . '</td>';
    echo '<td>' . esc_html($version) . '</td>';
    echo '<td>';

    // If vulnerabilities exist, display a warning icon and link to the details
    if ($vulnerabilities) {
        echo '<a href="' . esc_url($url) . '" target="_blank" title="' . esc_attr__('View Vulnerability Details', 'simple-wp-vulnerability-watcher') . '"><span style="color: #D63638;"><span class="dashicons dashicons-warning"></span></span></a>';
    } else {
        echo '<span style="color: green;"><span class="dashicons dashicons-yes"></span></span>';
    }

    echo '</td>';
    echo '</tr>';
}

/**
 * Renders a section title row in the vulnerabilities table
 */
function wpcv_section_title_row($title)
{
    // Allow specific HTML tags like <i> and <span>
    $allowed_html = array(
        'i' => array('class' => array()),
        'span' => array('class' => array()),
        'b' => array(),
        'strong' => array(),
        'em' => array(),
    );

    echo '<tr><td colspan="3" style="background-color: #ddd;">' . wp_kses($title, $allowed_html) . '</td></tr>';
}


/**
 * Checks for vulnerabilities in all plugins, themes, and WordPress core
 */
function wpcv_check_all_vulnerabilities()
{

    // Reset vulnerabilities count
    $vulnerabilities_count = 0;

    // Check for vulnerabilities in all installed plugins
    $all_plugins = get_plugins();
    foreach ($all_plugins as $path => $plugin) {
        $slug_parts = explode('/', $path);
        $slug = $slug_parts[0];
        if ($slug !== 'wp-check-vulnerability') {
            // Increment if vulnerability found
            $vulnerabilities_count += wpcv_check_vulnerability($slug, $plugin['Version'], 'plugin') ? 1 : 0;
        }
    }

    // Check for vulnerabilities in all installed themes
    $all_themes = wp_get_themes();
    foreach ($all_themes as $slug => $theme) {
        // Increment if vulnerability found
        $vulnerabilities_count += wpcv_check_vulnerability($slug, $theme->get('Version'), 'theme') ? 1 : 0;
    }

    // Check for vulnerabilities in WordPress core
    $wp_version = get_bloginfo('version');
    // Increment if vulnerability found
    $vulnerabilities_count += wpcv_check_vulnerability('wordpress', $wp_version, 'core') ? 1 : 0;
    // Save the total count of vulnerabilities in wp_options
    update_option('wpcv_total_vulnerabilities_count', $vulnerabilities_count, false);
    wp_cache_delete('wpcv_total_vulnerabilities_count', 'options');
}

/**
 * Checks for vulnerabilities in a specific plugin, theme, or WordPress core version
 */
function wpcv_check_vulnerability($slug_or_version, $current_version, $type)
{
    $data = wpcv_api_request($type, $slug_or_version);

    if (!$data || !isset($data['data']['vulnerability']) || !is_array($data['data']['vulnerability'])) {
        return false;
    }

    $max_versions = extract_max_versions($data);
    return in_array($current_version, $max_versions);
}

/**
 * Sends an API request to the WPVulnerability.net service to check for vulnerabilities
 */
function wpcv_api_request($endpoint, $slug_or_version)
{
    $url = "https://www.wpvulnerability.net/{$endpoint}/{$slug_or_version}/";
    $response = wp_remote_get($url);

    if (is_wp_error($response)) {
        return false;
    }

    $data = json_decode(wp_remote_retrieve_body($response), true);
    if (!is_array($data) || isset($data['error']) && $data['error'] == 1) {
        return false;
    }

    return $data;
}

/**
 * Extracts the maximum safe versions from the vulnerability data
 */
function extract_max_versions($data)
{
    $max_versions = [];
    foreach ($data['data']['vulnerability'] as $vulnerability) {
        if (isset($vulnerability['operator']['max_version']) && $vulnerability['operator']['max_operator'] === 'le') {
            $max_versions[] = $vulnerability['operator']['max_version'];
        }
    }
    return $max_versions;
}

/**
 * Adds an admin bar item that displays the vulnerability count
 */
function wpcv_admin_bar_menu($wp_admin_bar)
{
    // Retrieve the count of vulnerabilities from wp_options
    $vulnerabilities_count = get_option('wpcv_total_vulnerabilities_count', 0);
    if ($vulnerabilities_count === 0) return;

    $wp_admin_bar->add_node(array(
        'id' => 'wpcv_admin_bar',
        'title' => '<span class="ab-icon dashicons-before dashicons-shield-alt"></span> ' . __('Vulnerabilities', 'simple-wp-vulnerability-watcher') . ' <span class="ab-label">' . esc_html($vulnerabilities_count) . '</span>',
        'href' => admin_url('admin.php?page=check-vulnerabilities'),
        'meta' => array('class' => 'wpcv-admin-bar-item')
    ));
}

/**
 * Displays an admin notice when vulnerabilities are detected
 */
function wpcv_display_admin_notice()
{
    $vulnerabilities_count = get_option('wpcv_total_vulnerabilities_count', 0);

    // If there are no vulnerabilities or the notice is dismissed, don't display the notice
    if ($vulnerabilities_count === 0 || get_transient('wpcv_vulnerability_notice_dismissed')) return;

    // Display the admin notice if vulnerabilities are detected
    if (get_transient('wpcv_vulnerability_detected')) {
        $settings_link = admin_url('admin.php?page=check-vulnerabilities');
        $message = '<span class="message dashicons dashicons-warning"></span> ' . /* translators: %s: check vulnerabilities link */ sprintf(__('Alert! Potential security risks have been identified in your WordPress configuration! %s', 'simple-wp-vulnerability-watcher'), '<a href="' . esc_url($settings_link) . '">' . __('Check here', 'simple-wp-vulnerability-watcher') . '</a>');
        $allowed_html = array(
            'a' => array(
                'href' => array(),
                'title' => array(),
            ),
            'p' => array(),
            'span' => array('class' => array()),
            'strong' => array(),
            'em' => array(),
        );

        echo '<div class="notice notice-error is-dismissible wpcv-dismissible-notice"><p>' . wp_kses($message, $allowed_html) . '</p></div>';
    }
}

/**
 * Handles AJAX requests to dismiss the admin notice
 */
function wpcv_dismiss_notice()
{
    // Verify nonce for security
    check_ajax_referer('wpcv_dismiss_notice_nonce', 'nonce');

    // Set a transient to hide the notice for 24 hours
    set_transient('wpcv_vulnerability_notice_dismissed', 'true', 60 * 60 * 24);

    wp_die();
}
